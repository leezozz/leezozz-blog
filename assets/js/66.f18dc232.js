(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{468:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"相等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相等"}},[s._v("#")]),s._v(" 相等 ==")]),s._v(" "),t("p",[s._v("相等操作符用于比较两个值是否相等。如果比较的两个值类型不同，JavaScript会尝试进行隐式转换，使它们具有相同的类型，然后再进行比较。这种隐式转换肯呢个会导致一些意外的结果。")]),s._v(" "),t("h3",{attrs:{id:"隐式转换规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换规则"}},[s._v("#")]),s._v(" 隐式转换规则")]),s._v(" "),t("p",[s._v("在进行相等比较时，如果两个值的类型不同，则会进行以下隐式转换："),t("br")]),s._v(" "),t("h4",{attrs:{id:"基本类型的隐式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的隐式转换"}},[s._v("#")]),s._v(" 基本类型的隐式转换")]),s._v(" "),t("ul",[t("li",[s._v("如果一个值是布尔类型，另一个值是非布尔类型（除了null和undefined），则将布尔值转换为数值进行比较。")]),s._v(" "),t("li",[s._v("如果一个值是字符串类型，另一个值是数值类型、布尔类型或对象类型，则将字符串转换为数值进行比较。")]),s._v(" "),t("li",[s._v("如果一个值是对象类型，另一个值是字符串类型、数值类型或Symbol类型，则将对象转换为原始值（通过调用对象的valueOf() 或 toString() 方法）进行比较。")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，'1' 隐式转换为数值 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，true 隐式转换为数值 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，null 和 undefined 是相等的")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"引用类型的隐式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用类型的隐式转换"}},[s._v("#")]),s._v(" 引用类型的隐式转换")]),s._v(" "),t("ul",[t("li",[s._v("字符串转换：引用类型的值在进行字符串转换时，会先调用 toString() 方法，将其转换为字符串。如果该方法不存在或返回的不是一个有效的字符串，则会继续调用 valueOf() 方法进行转换。")]),s._v(" "),t("li",[s._v("数值转换：引用类型的值在进行数值转换时，会先调用 valueOf() 方法，将其转换为数值。如果该方法返回的不是一个有效的数值，则会继续调用 toString() 方法进行转换。")]),s._v(" "),t("li",[s._v("布尔转换：引用类型的值在进行布尔转换时，始终会被视为真值，除非它的 valueOf() 方法返回的是 null 或 undefined，这时它会被视为假值。")])]),s._v(" "),t("h2",{attrs:{id:"全等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全等"}},[s._v("#")]),s._v(" 全等 ===")]),s._v(" "),t("ul",[t("li",[s._v("全等操作符用于比较两个值是否严格相等，不会进行隐式转换。只有在两个值类型相同且值也相等的情况下，全等操作符才返回 true，否则返回 false。")]),s._v(" "),t("li",[s._v("全等操作符不会进行类型转换，因此它更加严格和精确。")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，类型不同")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，类型不同")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，类型相同但值不同")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);