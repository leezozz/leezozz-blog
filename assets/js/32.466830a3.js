(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{388:function(t,s,n){t.exports=n.p+"assets/img/nuxt-life-cycle.b8c78c0e.png"},484:function(t,s,n){"use strict";n.r(s);var a=n(2),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("p",[s("img",{attrs:{src:n(388),alt:"nuxt-life-cycle"}})]),t._v(" "),s("p",[t._v("简单来说，Nuxt就是基于Vue的一个应用框架，采用"),s("strong",[t._v("服务端渲染")]),t._v("，让你的SPA应用（Vue）也可以拥有"),s("strong",[t._v("SEO")]),s("br"),t._v("\nNuxt.js简单的说是Vue.js的通用框架，最常用的就是用来作"),s("strong",[t._v("SSR（服务器端渲染）")]),t._v("。再直白点说，就是Vue.js原来是开发SPA（单页应用）的，但是随着技术的普及，很多人想用Vue开发多页应用，并在服务端完成渲染。这时候就出现了Nuxt.js这个框架，她简化了SSR的开发难度。还可以直接用命令把我们制作的vue项目生成为静态html。"),s("br"),t._v("\nVue的生命周期全都跑在客户端(浏览器)，而Nuxt的生命周期有些在服务端(Node)、客户端，甚至两边都在，绿框内运行在客户端。"),s("br"),t._v(" "),s("strong",[t._v("因为红框、黄框内的周期都不存在Window对象，所以不能直接使用window，会报错")]),s("br"),t._v(" "),s("br"),t._v("\n下面详细讲一下每个钩子函数执行情况："),s("br")]),t._v(" "),s("ol",[s("li",[t._v("incoming request\n这个阶段是服务器收到请求，开始走流程")]),t._v(" "),s("li",[t._v("nuxtServerInit")])]),t._v(" "),s("ul",[s("li",[t._v("服务器初始化")]),t._v(" "),s("li",[t._v("只能够在store/index.js中使用")]),t._v(" "),s("li",[t._v("用于在渲染页面之前存储数据到vuex中")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("middleware\n这个阶段会执行一些预定义的中间件，自己定义的中间件也会在这个阶段执行")]),t._v(" "),s("li",[t._v("validate\n可以让你在动态路由对应的页面组件中配置一个校验方法用于校验动态路由参数的有效性。(具体实现请参考官方文档)")]),t._v(" "),s("li",[t._v("asyncData\n这个方法可以使得你能够在渲染组件之前异步获取数据。好比你在vue组件中用created获取数据一样，不同的是asyncData是在服务端执行的"),s("br"),t._v("\n还有要注意的是：asyncData只是在首屏的时候调用一次（即页面渲染之前，所以事件触发不了它）")]),t._v(" "),s("li",[t._v("fetch\nfetch 方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。"),s("br"),t._v("\n如果页面组件设置了 fetch 方法，它会在组件每次加载前被调用（在服务端或切换至目标路由之前）。"),s("br"),t._v("\nfetch 方法的第一个参数是页面组件的上下文对象 context，我们可以用 fetch 方法来获取数据填充应用的状态树。为了让获取过程可以异步，你需要返回一个 Promise，Nuxt.js 会等这个 promise 完成后再渲染组件。"),s("br"),t._v("\n注意，在fetch阶段可以使用this获取组件实例，fetch是在组件初始化之前被调用（好像fetch函数也会在created和beforeMount之间执行一次）"),s("br"),t._v("\n如果要在fetch中调用并操作store，请使用store.dispatch，但是要确保在内部使用async / await等待操作结束：")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET_STARS'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ol",{attrs:{start:"7"}},[s("li",[t._v("render\n这个阶段开始准备客户端渲染，如果过程中有通过nuxt-link跳转，会退回至middleware阶段重新执行")]),t._v(" "),s("li",[t._v("beforeCreat和created阶段\n这个和vue中的钩子函数功能基本类似，有一个小的差别，vue的这两个钩子只在客户端执行，nuxt的这两个钩子在客户端和服务端都会执行一遍")]),t._v(" "),s("li",[t._v("其他阶段\n之后的阶段都是在客户端中执行，比如beforeMount和mounted阶段等等 "),s("br"),t._v("\n参考：https://juejin.cn/post/7018474081758478350")])]),t._v(" "),s("h3",{attrs:{id:"seo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#seo"}},[t._v("#")]),t._v(" SEO")]),t._v(" "),s("p",[t._v("SEO（搜索引擎优化）是一种让网站在搜索引擎结果中更加清晰，也帮助我们将搜索结果更靠前")])])}),[],!1,null,null,null);s.default=e.exports}}]);